---
#========================
# File tasks/main.yml
#
# Description: Creates a VM on the failover cluster
#
# Author: Derek 'dRock' Halsey
#========================

- name: WIN_FILE | Ensure Directories are present for new VM
  delegate_to: "{{ hyper_v_clustered_instance.hyper_v.host }}"
  win_file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ hyper_v_clustered_instance.hyper_v.storage_path }}\\{{ hyper_v_clustered_instance.sdn }}"
    - "{{ hyper_v_clustered_instance.hyper_v.storage_path }}\\{{ hyper_v_clustered_instance.sdn }}\\Virtual Hard Disks"

# This check will be used to determine if the VM already exists. If the hard drive
# for the VM is found in the expected location, it will be assumed that the VM
# already exists. This is to prevent copying the template hard drive over an
# existing hard drive (the script should not be destructive to existing VMs).
- name: WIN_STAT | Check if the vhdx is present
  delegate_to: "{{ hyper_v_clustered_instance.hyper_v.host }}"
  win_stat:
    path: "{{ hyper_v_clustered_instance.hyper_v.storage_path }}\\{{ hyper_v_clustered_instance.sdn }}\\Virtual Hard Disks\\disk-0.vhdx"
    get_md5: false
    get_checksum: false
  register: newUbuntuServer_vmVhdx

- name: WIN_COPY | Copy the VM template vhdx to the new directory
  delegate_to: "{{ hyper_v_clustered_instance.hyper_v.host }}"
  win_copy:
    src: "{{ hyper_v_clustered_instance.hyper_v.vhdx_template }}"
    dest: "{{ hyper_v_clustered_instance.hyper_v.storage_path }}\\{{ hyper_v_clustered_instance.sdn }}\\Virtual Hard Disks\\disk-0.vhdx"
    remote_src: true
  when: not newUbuntuServer_vmVhdx.stat.exists

- name: WIN_SHELL | Create VM in Hyper-V
  delegate_to: "{{ hyper_v_clustered_instance.hyper_v.host }}"
  win_shell: |-
    if ( !( Get-VM -name {{ hyper_v_clustered_instance.sdn }} -erroraction 'ignore' ) ) {
      New-VM -Name "{{ hyper_v_clustered_instance.sdn }}" -ComputerName {{ hyper_v_clustered_instance.hyper_v.host }} -VHDPath "{{ hyper_v_clustered_instance.hyper_v.storage_path }}\{{ hyper_v_clustered_instance.sdn }}\Virtual Hard Disks\disk-0.vhdx" -Path "{{ hyper_v_clustered_instance.hyper_v.storage_path }}" }

- name: WIN_SHELL | Set Number of Proccessors
  delegate_to: "{{ hyper_v_clustered_instance.hyper_v.host }}"
  win_shell: Set-VMProcessor {{ hyper_v_clustered_instance.sdn }} -Count {{ hyper_v_clustered_instance.processors }}

- name: WIN_SHELL | Set VM Memory
  delegate_to: "{{ hyper_v_clustered_instance.hyper_v.host }}"
  win_shell: Set-VM -Name {{ hyper_v_clustered_instance.sdn }} -{{ hyper_v_clustered_instance.memory.type }} -MemoryMaximumBytes {{ hyper_v_clustered_instance.memory.max }} -MemoryStartupBytes {{ hyper_v_clustered_instance.memory.min }}

- name: WIN_SHELL | Disconnect NIC
  delegate_to: "{{ hyper_v_clustered_instance.hyper_v.host }}"
  win_shell: Disconnect-VMNetworkAdapter -VMName {{ hyper_v_clustered_instance.sdn }}

- name: WIN_SHELL | Start VM
  delegate_to: "{{ hyper_v_clustered_instance.hyper_v.host }}"
  win_shell: start-vm {{ hyper_v_clustered_instance.sdn }}

- name: WIN_SHELL | Wait for the VM Heartbeat
  delegate_to: "{{ hyper_v_clustered_instance.hyper_v.host }}"
  win_shell: |-
    while( (Get-VM -Name {{ hyper_v_clustered_instance.sdn }} ).HeartBeat -ne  'OkApplicationsUnknown'){
        Start-Sleep -Seconds 1
    }

- name: Pause | Wait 15s for VM services to Start
  pause:
    seconds: 15

- name: WIN_SHELL | Set Networking
  delegate_to: "{{ hyper_v_clustered_instance.hyper_v.host }}"
  win_shell: |-
      Function Set-VMNetworkConfiguration {
                 [CmdletBinding()]
                 Param (
                     [Parameter(Mandatory=$true,
                                Position=1,
                                ParameterSetName='DHCP',
                                ValueFromPipeline=$true)]
                     [Parameter(Mandatory=$true,
                                Position=0,
                                ParameterSetName='Static',
                                ValueFromPipeline=$true)]
                     [Microsoft.HyperV.PowerShell.VMNetworkAdapter]$NetworkAdapter,
                     [Parameter(Mandatory=$true,
                                Position=1,
                                ParameterSetName='Static')]
                     [String[]]$IPAddress=@(),
                     [Parameter(Mandatory=$false,
                                Position=2,
                                ParameterSetName='Static')]
                     [String[]]$Subnet=@(),
                     [Parameter(Mandatory=$false,
                                Position=3,
                                ParameterSetName='Static')]
                     [String[]]$DefaultGateway = @(),
                     [Parameter(Mandatory=$false,
                                Position=4,
                                ParameterSetName='Static')]
                     [String[]]$DNSServer = @(),
                     [Parameter(Mandatory=$false,
                                Position=0,
                                ParameterSetName='DHCP')]
                     [Switch]$Dhcp
                 )
                 $VM = Get-WmiObject -Namespace 'root\virtualization\v2' -Class 'Msvm_ComputerSystem' | Where-Object { $_.ElementName -eq $NetworkAdapter.VMName }
                 $VMSettings = $vm.GetRelated('Msvm_VirtualSystemSettingData') | Where-Object { $_.VirtualSystemType -eq 'Microsoft:Hyper-V:System:Realized' }
                 $VMNetAdapters = $VMSettings.GetRelated('Msvm_SyntheticEthernetPortSettingData')
                 $NetworkSettings = @()
                 foreach ($NetAdapter in $VMNetAdapters) {
                     if ($NetAdapter.Address -eq $NetworkAdapter.MacAddress) {
                         $NetworkSettings = $NetworkSettings + $NetAdapter.GetRelated("Msvm_GuestNetworkAdapterConfiguration")
                     }
                 }
                 $NetworkSettings[0].IPAddresses = $IPAddress
                 $NetworkSettings[0].Subnets = $Subnet
                 $NetworkSettings[0].DefaultGateways = $DefaultGateway
                 $NetworkSettings[0].DNSServers = $DNSServer
                 $NetworkSettings[0].ProtocolIFType = 4096
                 if ($dhcp) {
                     $NetworkSettings[0].DHCPEnabled = $true
                 } else {
                     $NetworkSettings[0].DHCPEnabled = $false
                 }
                 $Service = Get-WmiObject -Class "Msvm_VirtualSystemManagementService" -Namespace "root\virtualization\v2"
                 $setIP = $Service.SetGuestNetworkAdapterConfiguration($VM, $NetworkSettings[0].GetText(1))
                 if ($setip.ReturnValue -eq 4096) {
                     $job=[WMI]$setip.job
                     while ($job.JobState -eq 3 -or $job.JobState -eq 4) {
                         start-sleep 1
                         $job=[WMI]$setip.job
                     }
                     if ($job.JobState -eq 7) {
                         write-host "Success"
                     }
                     else {
                         $job.GetError()
                     }
                 } elseif($setip.ReturnValue -eq 0) {
                     Write-Host "Success"
                 }
             } Get-VMNetworkAdapter -VMName {{ hyper_v_clustered_instance.sdn }} | Set-VMNetworkConfiguration -IPAddress {{ hyper_v_clustered_instance.network.ip }} -Subnet {{ hyper_v_clustered_instance.network.subnet }} -DNSServer {{ hyper_v_clustered_instance.network.dns }} -DefaultGateway {{ hyper_v_clustered_instance.network.gateway }}
  tags:
  - setNetwork

- name: WIN_SHELL | Restart VM
  delegate_to: "{{ hyper_v_clustered_instance.hyper_v.host }}"
  win_shell: restart-vm {{ hyper_v_clustered_instance.sdn }} -force
#  tags:
#  - setNetwork

- name: WIN_SHELL | Connect NIC
  delegate_to: "{{ hyper_v_clustered_instance.hyper_v.host }}"
  win_shell: Connect-VMNetworkAdapter -VMName {{ hyper_v_clustered_instance.sdn }} -SwitchName {{ hyper_v_clustered_instance.network.v_switch }}

- name: WAIT_FOR | Wait for response from host on port 22
  local_action: wait_for
  args:
    port: 22
    host: "{{ hyper_v_clustered_instance.network.ip }}"
    delay: 30
    timeout: 400

- name: WIN_SHELL | Register DNS entry with Domain Controller
  delegate_to: "{{ hyper_v_clustered_instance.dns_server }}"
  win_shell: |-
    if (!(Get-DnsServerResourceRecord -Name "{{ hyper_v_clustered_instance.sdn }}" -ZoneName "{{ domain }}" -erroraction 'ignore')) {
      Add-DnsServerResourceRecordA -Name "{{ hyper_v_clustered_instance.sdn }}" -ZoneName "{{ domain }}" -AllowUpdateAny -IPv4Address "{{ hyper_v_clustered_instance.network.ip }}" }
    else {
      Remove-DnsServerResourceRecord -ZoneName "{{ domain }}" -RRType "A" -Name "{{ hyper_v_clustered_instance.sdn }}" -Force;
      Add-DnsServerResourceRecordA -Name "{{ hyper_v_clustered_instance.sdn }}" -ZoneName "{{ domain }}" -AllowUpdateAny -IPv4Address "{{ hyper_v_clustered_instance.network.ip }}" }

- name: WIN_SHELL | Add VM to Cluster
  delegate_to: "{{ hyper_v_clustered_instance.hyper_v.cluster }}"
  win_shell: |-
    if ( !( Get-ClusterResource -Cluster {{ hyper_v_clustered_instance.hyper_v.cluster }} -Name "Virtual Machine {{ hyper_v_clustered_instance.sdn }}" -erroraction 'ignore' ) ) {
      Add-ClusterVirtualMachineRole -VMName {{ hyper_v_clustered_instance.sdn }} -Cluster {{ hyper_v_clustered_instance.hyper_v.cluster }} }

- name: WIN_SHELL | Move to default hyper-v host
  delegate_to: "{{ hyper_v_clustered_instance.hyper_v.cluster }}"
  win_shell: |-
    try {
      get-clusterresource -cluster {{ hyper_v_clustered_instance.hyper_v.cluster }} | where resourcetype -eq 'Virtual Machine' | where name -eq 'Virtual Machine {{ hyper_v_clustered_instance.sdn }}' | get-vm | Move-ClusterVirtualMachineRole -migrationtype live -node {{ hyper_v_clustered_instance.node }} -wait 0 -ea stop
    } catch [Microsoft.FailoverClusters.PowerShell.ClusterCmdletException] {
      Write-Output "The virtual machine resource is already on the node.  Migration is not needed."
    }
